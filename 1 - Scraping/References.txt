0.  Apple podcast search API documentation - https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/

1.  https://chartable.com/charts/chartable

2.  Finding reviews.  Only the first page 
https://itunes.apple.com/us/rss/customerreviews/page=1/id=1057255460/sortby=mostrecent/json

3.a  finding top 2 non-explicit podcasts in US
https://rss.itunes.apple.com/api/v1/us/podcasts/top-podcasts/all/2/non-explicit.json

3.b Finding top 200 podcasts in US (explicit included)
https://rss.itunes.apple.com/api/v1/us/podcasts/top-podcasts/all/200/explicit.json

4.  Finding latest episodes
https://developer.apple.com/forums/thread/654141

5.  The awesome podsearch package from github.  follow directions to pip install the package locally and try it out
https://github.com/nalgeon/podsearch-py

6.  The overall RSS site from itunes
https://rss.itunes.apple.com/en-us

7.  One podcasters' journey to get indepth detail about his podcast.  Code is in R.
  We can use his technique for exploration into a podcast
https://www.popmusicresearch.org/post/get-apple-podcast-reviews/

8.  How podcasts are created and distributed in the first place.
https://www.bcast.fm/blog/podcast-directories


9.  A sample code to sort out bad and good reviews.  Just sample
https://medium.com/@kentran27/simple-json-reader-to-check-app-store-reviews-bf5475fbeec


10.  One stop location to find latest release date, track count-number of episodes so far), primary genre and related genres  
https://itunes.apple.com/lookup?id=631094342&country=US&media=podcast&entity=podcastEpisode&limit=0
Tag names for our features -trackCount, collectionName, releaseDate, primaryGenreName, genres, 

https://itunes.apple.com/lookup?id=480486345&country=US&media=podcast&entity=podcastEpisode&limit=0/json
https://itunes.apple.com/us/rss/customerreviews/id=360084272/json



import json, requests
def reviews(url):
    res = requests.get(url)
    print("Status:", res.status_code)
    data = json.loads(res.text)
    for i in data['feed']['entry']:
        try:
            rating = i.get("im:rating").get('label')
            if  int(rating)<=3:
                print("BAD RATING: ", i.get("im:rating").get('label'), "\n", \
                      "REVIEW: ", i.get('content').get('label'), "\n")
        except:
            print('No entry')
    print('END', "\n")        
            
url_list = ['https://itunes.apple.com/sg/rss/customerreviews/id=482524585/json', \
            'https://itunes.apple.com/my/rss/customerreviews/id=487538098/json', \
            'https://itunes.apple.com/th/rss/customerreviews/id=487558434/json', \
            'https://itunes.apple.com/id/rss/customerreviews/id=487554800/json'] 

for url in url_list: 
    reviews(url)


select  "[", id, ",'" , country,"']," from podcast_reviews2 group by id, country having count(1) >= 350



delete from podcast_reviews2
where rowid not in (select min(rowid)
                    from podcast_reviews2
                    group by id, country, review_title)


insert into podcast_reviews  (	"id"	,	"country"	,	"review_title"	,	"review_text"	,	"review_rating") select 	"id"	,	"country"	,	"review_title"	,	"review_text"	,	"review_rating"  from "podcast_reviews_temp"

delete from podcast_reviews_temp